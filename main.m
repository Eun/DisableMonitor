/** * DisableMonitor, Disable Monitors on Mac * * Copyright (C) 2014 Tobias Salzmann * * DisableMonitor is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 2 of the * License, or (at your option) any later version. * * DisableMonitor is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * * See the GNU General Public License for more details. You should have received a copy of the GNU * General Public License along with DisableMonitor. If not, see <http://www.gnu.org/licenses/>. * * Authors: Tobias Salzmann */#import <Cocoa/Cocoa.h>#import "MonitorDataSource.h"#import "DisableMonitorAppDelegate.h"#import "DisplayIDAndNameCondition.h"int cmd_list(NSString* arg){    NSMutableArray *dict = [MonitorDataSource GetSortedDisplays];    if (dict == nil)    {        printf("No Displays found");    }    else    {        printf(" ID         Name              Enabled\n");        printf("----------- ----------------- -------\n");        for (DisplayIDAndNameCondition* idAndName in dict)        {            printf(" %-10u %-17s %s\n", [idAndName id], [[idAndName name] UTF8String], [(DisplayIDAndNameCondition*)idAndName enabled] ? "YES" : "NO");        }        printf("----------- ----------------- -------\n");        [dict release];    }    return 0;}int cmd_disable(NSString *arg){    if ([arg length] < 2)        return 1;    CGDisplayCount nDisplays = 0;    CGDirectDisplayID displayList[0x10];    CGDisplayErr err = CGSGetDisplayList(0x10, displayList, &nDisplays);        CGDirectDisplayID displayID = [[NSUserDefaults standardUserDefaults] integerForKey:[arg substringFromIndex:1]];        if (err == 0 && nDisplays > 0)    {                for (int i = 0; i < nDisplays; i++)        {            if (displayList[i] == displayID)            {                if (CGDisplayIsOnline(displayID) && CGDisplayIsActive(displayID))                {                    [DisableMonitorAppDelegate toggleMonitor:displayID enabled:NO];                    return 0;                }            }        }    }    printf("Could not find display %u!\n", displayID);    return 1;}int cmd_enable(NSString *arg){    if ([arg length] < 2)        return 1;    CGDisplayCount nDisplays = 0;    CGDirectDisplayID displayList[0x10];    CGDisplayErr err = CGSGetDisplayList(0x10, displayList, &nDisplays);        CGDirectDisplayID displayID = [[NSUserDefaults standardUserDefaults] integerForKey:[arg substringFromIndex:1]];        if (err == 0 && nDisplays > 0)    {                for (int i = 0; i < nDisplays; i++)        {            if (displayList[i] == displayID)            {                if (CGDisplayIsOnline(displayID) && !CGDisplayIsActive(displayID))                {                    [DisableMonitorAppDelegate toggleMonitor:displayID enabled:YES];                    return 0;                }            }        }    }    printf("Could not find display %u!\n", displayID);    return 1;    }int cmd_help(NSString *arg){    printf(           "usage: DisableMonitor [options]\n" \           "Options:\n" \           "-l, --list         list all attached monitors\n" \           "-d, --disable ID   disable monitor with specified id\n" \           "-e, --enable ID    enable monitor with specified id\n" \           "-h, --help         show this help\n");    return 0;}int main(int argc, char *argv[]){    NSArray *arguments = [[NSProcessInfo processInfo] arguments];    for (NSString* arg in arguments)    {        if ([arg caseInsensitiveCompare:@"--list"] == NSOrderedSame ||            [arg caseInsensitiveCompare:@"-list"] == NSOrderedSame ||            [arg caseInsensitiveCompare:@"-l"] == NSOrderedSame)        {            return cmd_list(arg);            return 0;        }        else if ([arg caseInsensitiveCompare:@"--disable"] == NSOrderedSame ||                  [arg caseInsensitiveCompare:@"-disable"] == NSOrderedSame ||                  [arg caseInsensitiveCompare:@"-d"] == NSOrderedSame)        {            return cmd_disable(arg);        }        else if ([arg caseInsensitiveCompare:@"--enable"] == NSOrderedSame ||                 [arg caseInsensitiveCompare:@"-enable"] == NSOrderedSame ||                 [arg caseInsensitiveCompare:@"-e"] == NSOrderedSame)        {            return cmd_enable(arg);        }        else if ([arg caseInsensitiveCompare:@"--help"] == NSOrderedSame ||                 [arg caseInsensitiveCompare:@"-help"] == NSOrderedSame ||                 [arg caseInsensitiveCompare:@"-h"] == NSOrderedSame)        {            return cmd_help(arg);        }    }        return NSApplicationMain(argc,  (const char **) argv);}